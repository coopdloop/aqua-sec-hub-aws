# .github/workflows/deploy.yml
name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  security-events: write # Github Security
  id-token: write # AWS OIDC

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download ASFF template
      - name: Download ASFF template
        run: |
          mkdir -p templates
          curl -o templates/asff.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/asff.tpl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/demo-app:${{ github.sha }} .
          docker push ${{ steps.login-ecr.outputs.registry }}/demo-app:${{ github.sha }}

      # Vulnerability Scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'image'
          image-ref: '${{ steps.login-ecr.outputs.registry }}/demo-app:${{ github.sha }}'
          format: 'template'
          template: '@templates/asff.tpl'
          output: 'report.asff'
          severity: 'CRITICAL,HIGH,MEDIUM'
          scanners: 'vuln'  # Disable secret scanning for speed
        env:
          AWS_REGION: us-east-1
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}


      # Process and validate vulnerability findings
      - name: Process vulnerability findings
        if: always()
        run: |
          if [ -f "report.asff" ]; then
            echo "Original file content:"
            cat report.asff

            echo -e "\nChecking if findings exist..."
            FINDINGS_COUNT=$(jq '.Findings | length' report.asff)

            if [ "$FINDINGS_COUNT" -gt 0 ]; then
              echo -e "\nFound $FINDINGS_COUNT findings. Processing..."

              # Create a temporary file with proper JSON formatting
              jq -c '.Findings = [.Findings[] |
                . + {
                  "AwsAccountId": (if .AwsAccountId == "" then env.AWS_ACCOUNT_ID else .AwsAccountId end),
                  "Region": (if .Region == "" then env.AWS_REGION else .Region end)
                }
              ]' report.asff > report.final.asff

              echo -e "\nFinal JSON content:"
              cat report.final.asff

              echo -e "\nImporting to Security Hub..."
              aws securityhub batch-import-findings --findings "file://report.final.asff"
            else
              echo "No findings to report"
            fi
          else
            echo "No vulnerability findings file found"
          fi
        env:
          AWS_REGION: us-east-1
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      # IaC Scanning
      - name: Run Trivy IaC scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
        # env:
        #   AWS_REGION: us-east-1
        #   AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        #
      # Upload SARIF file
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

      # # Upload results to Security Hub
      # - name: Import vulnerability findings to Security Hub
      #   if: always()
      #   run: |
      #     if [ -f "report.asff" ]; then
      #       aws securityhub batch-import-findings --findings "file://report.asff"
      #     fi
      #
      # - name: Import IaC findings to Security Hub
      #   if: always()
      #   run: |
      #     if [ -f "iac-report.asff" ]; then
      #       aws securityhub batch-import-findings --findings "file://iac-report.asff"
      #     fi

      # Deploy if all checks pass
      - name: Deploy to ECS
        if: success()
        run: |
          aws ecs update-service --cluster demo-cluster --service demo-service --force-new-deployment
