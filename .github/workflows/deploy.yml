# .github/workflows/deploy.yml
name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  security-events: write # Github Security
  id-token: write # AWS OIDC

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download ASFF template
      - name: Download ASFF template
        run: |
          mkdir -p templates
          curl -o templates/asff.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/asff.tpl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/demo-app:${{ github.sha }} .
          docker push ${{ steps.login-ecr.outputs.registry }}/demo-app:${{ github.sha }}

      # Generate SBOM
      - name: Generate SBOM
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          format: 'cyclonedx'
          output: 'sbom.cdx.json'
          scanners: 'vuln,secret,config'

      # Upload SBOM as artifact
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.cdx.json
          retention-days: 90

      # Vulnerability Scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'image'
          image-ref: '${{ steps.login-ecr.outputs.registry }}/demo-app:${{ github.sha }}'
          format: 'template'
          template: '@templates/asff.tpl'
          output: 'report.asff'
          severity: 'CRITICAL,HIGH,MEDIUM'
          scanners: 'vuln'  # Disable secret scanning for speed
        env:
          AWS_REGION: us-east-1
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      # IaC Security Scanning
      - name: Run Trivy IaC scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'json'
          output: 'iac-report.json'
          severity: 'CRITICAL,HIGH,MEDIUM'
          scanners: 'config'

      # Secret Scanning
      - name: Run Trivy secret scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'secrets-report.json'
          scanners: 'secret'


             # Process and validate vulnerability findings
      - name: Process security findings
        if: always()
        run: |
          process_findings() {
            local input_file=$1
            local output_file=$2
            local finding_type=$3

            if [ -f "$input_file" ]; then
              echo "Processing $finding_type findings..."

              # Create properly formatted JSON
              jq --arg account "$AWS_ACCOUNT_ID" \
                 --arg region "$AWS_REGION" \
                 --arg type "$finding_type" '
                .Findings = [.Findings[] |
                  . + {
                    AwsAccountId: $account,
                    Region: $region,
                    Description: (.Description | gsub("\n";" ")),
                    RecordState: "ACTIVE",
                    Types: ["Software and Configuration Checks/" + $type]
                  }
                ]' "$input_file" > "$output_file"

              # Import to Security Hub
              aws securityhub batch-import-findings --cli-input-json "file://$output_file"
            fi
          }

          process_findings "report.asff" "vuln-findings.json" "Vulnerabilities"

          # Convert IaC findings to ASFF format and process
          if [ -f "iac-report.json" ]; then
            jq -f templates/iac-to-asff.jq iac-report.json > iac.asff
            process_findings "iac.asff" "iac-findings.json" "Infrastructure/Misconfigurations"
          fi

          # Convert secret scanning findings to ASFF format and process
          if [ -f "secrets-report.json" ]; then
            jq -f templates/secrets-to-asff.jq secrets-report.json > secrets.asff
            process_findings "secrets.asff" "secrets-findings.json" "Secrets/Exposed"
          fi
        env:
          AWS_REGION: us-east-1
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      # Generate consolidated SARIF report
      - name: Generate consolidated SARIF report
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          scanners: 'vuln,secret,config'

      # Upload SARIF file
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

      # Deploy if all checks pass
      - name: Deploy to ECS
        if: success()
        run: |
          aws ecs update-service --cluster demo-cluster --service demo-service --force-new-deployment
